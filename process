#!/usr/bin/python
import os, sys,shutil
import zipfile
from optparse import OptionParser

'''
Bandcamp releases come as zipped directories of mp3 or flac and each 
need to be unzipped to a directory of the same name minus .zip
The contained audio files are named as %artist% - %album% - %track#% %title%
They need to be renamed without the artist and album portion of the filename

It will print out the mktorrent commands you'd need to run, but I've left that
for you to do since if the release you're uploading is flac, it'd be smarter to
just use whatmp3 to transcode all the formats (github.com/recursiveforest/whatmp3)
'''

# Remember to enter your passkey if you want the mktorrent cmd printed correctly
passkey = "" 
announce_url = "http://tracker.what.cd:34000/{}/announce".format( passkey )

def make_backup(path):
    '''if backup already exists, overwrite it'''
    if path.endswith('/'):
        path = path[:len(path)-1] # string trailing slash
    dest = path + '-backup'
    if os.path.exists(dest):
        shutil.rmtree(dest)
    shutil.copytree(path, dest)

#TODO needs error checking like crazy
def rename_all(path):
    ''' Takes a path to walk for flac, mp3, jpg files 
        renames anything with %thing% - %thing% - %rest%
        to %rest%
    '''
    for path,dirs,files in os.walk(path):
        
        for _dir in dirs:
            # process boomkat directories
            if _dir.startswith('flac-'):
                __dir = os.path.join( path, _dir)
                os.rename( __dir, __dir.strip('-flac') )
                   
        for file in files:
            parent_dir = os.path.join(path, os.path.dirname(file))
            if file.endswith('.flac') or file.endswith('.mp3'):
                try:
                    chng = ' '.join(file.split(' - ')[2:])
                    fp = os.path.join(parent_dir,file) 
                    cp =  os.path.join(parent_dir, chng)
                    os.rename(fp, cp)
                except:
                    pass
                            

def prepare_zips(path):
    ''' Takes a full path to a zip file and unzips it to 
            a directory of the same name with .zip stripped '''
    for path,dirs,files in os.walk(path):
        for file in files:
            if file.endswith('.zip'):
                zip_path = os.path.join(path, file)
                unzip_file(zip_path)
                os.remove(zip_path)

def unzip_file(file):
    dir = file.strip('.zip')
    os.mkdir(dir, 0777)
    zfobj = zipfile.ZipFile(file)
    for name in zfobj.namelist():
        if name.endswith('/'):
            os.mkdir(os.path.join(dir, name))
        else:
            outfile = open(os.path.join(dir, name), 'wb')
            outfile.write(zfobj.read(name))
            outfile.close()

def main():
    if len(sys.argv) < 2:
        sys.exit("Usage: {} <directory to process>".format( sys.argv[0]) )
    
    make_backup(sys.argv[1])
    print "------------------------- Backup made  --------------------------"
    
    prepare_zips(sys.argv[1])
    print "------------------------- Done with zips --------------------------"
    
    rename_all(sys.argv[1])
    print "------------------------- Done with renames --------------------------"
    
    make_torrent(sys.argv[1])
    return 0    

def make_torrent(directory):
    cmd = "mktorrent -p -a {}".format( announce_url )
    for path,dirs,files in os.walk(directory):
        for dir in dirs:
            dir_path = os.path.join(path, dir)
            print cmd + " {}".format( dir_path )

if __name__ == '__main__': 
    main()
